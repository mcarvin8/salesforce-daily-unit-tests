stages:
  - test
  - quality

# update based on the org you want to authenticate to
variables:
  AUTH_ALIAS: SANDBOX
  AUTH_URL: $SANDBOX_AUTH_URL

####################################################
# Define a container with the Salesforce CLI.
####################################################
.salesforce-container:
  image: ubuntu:latest
  before_script:
    - apt-get update
    - apt-get install -y curl git python3
    - curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
    - apt-get install -y nodejs
    - npm install --global @salesforce/cli@latest
    - sf version --verbose --json

####################################################
# Run all local tests in the org on a pipeline schedule with $JOB_NAME == 'unitTest'
####################################################
test:unit:
  extends: .salesforce-container
  stage: test
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == 'schedule' && $JOB_NAME == 'unitTest'
      when: always
    - when: never
  artifacts:
    paths:
      - test_run_id.txt
    expire_in: 1 day 
  script:
    - python3 ./authenticate_sf.py --alias $AUTH_ALIAS --url $AUTH_URL
    - sf apex run test --test-level RunLocalTests --result-format human > ./id.txt
    - echo "$(node ./extractId.js)" > ./test_run_id.txt
  tags:
    - aws,prd,us-west-2

test:postrun:
  extends: .salesforce-container
  stage: test
  rules:
    # update the delayed counter if your tests take longer than 4 hours
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == 'schedule' && $JOB_NAME == 'unitTest'
      when: delayed
      start_in: 4 hours
      needs: ['test:unit']
    - when: never
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 day 
  script:
    - echo y | sf plugins install apex-code-coverage-transformer@1.7.4
    - TEST_RUN_ID=$(cat test_run_id.txt)
    - python3 ./authenticate_sf.py --alias $AUTH_ALIAS --url $AUTH_URL
    # set "|| true" so job passes even if there are failed tests
    # must re-direct output to a text file to avoid exceeding the job log limit
    - sf apex get test --test-run-id $TEST_RUN_ID --code-coverage -r json -d "coverage" > ./results.json || true
  tags:
    - aws,prd,us-west-2

####################################################
# Scan the code base with SonarQube.
# Use "coverage.xml" created in previous jobs.
####################################################
quality:
  image:
    name: sonarsource/sonar-scanner-cli
  stage: quality
  cache:
    key: $CI_JOB_NAME
    paths:
      - .sonar/cache
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
      changes:
        - 'force-app/main/default/classes/*.cls'
        - 'force-app/main/default/triggers/*.trigger'
      variables:
        SONAR_REF: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      when: on_success
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == 'schedule' && $JOB_NAME == 'unitTest'
      variables:
        SONAR_REF: $CI_COMMIT_REF_NAME
      when: on_success
    - when: never
  allow_failure: true
  variables:
    SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar'
    GIT_DEPTH: '0'
    SONAR_LOGIN: $SONAR_TOKEN
    SONAR_HOST_URL: $SONAR_URL
    # set to true to fail jobs which do not meet quality gate
    SONAR_GATE: 'false'
  script:
    - sonar-scanner -Dsonar.qualitygate.wait=$SONAR_GATE -Dsonar.projectKey=$CI_PROJECT_PATH_SLUG -Dsonar.gitlab.ref_name=$SONAR_REF -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHORT_SHA -Dsonar.coverageReportPaths=coverage.xml
  tags:
    - aws,prd,us-west-2
